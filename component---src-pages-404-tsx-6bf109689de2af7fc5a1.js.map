{"version":3,"file":"component---src-pages-404-tsx-6bf109689de2af7fc5a1.js","mappings":"+JAGO,MAAMA,EAAYC,IAAA,IAAC,SAAEC,GAAyCD,EAAA,OACnEE,EAAAA,cAAA,OAAKC,UCHgB,sCDGcF,EAAe,C,qEEGpD,MAFeD,IAAA,IAAC,SAAEC,GAAyCD,EAAA,OAAKE,EAAAA,cAAAA,EAAAA,SAAA,KAAGD,EAAY,C,+ECiD/E,MAjDYD,IAAwD,IAAvD,MAAEI,EAAK,YAAEC,EAAW,SAAEC,EAAQ,SAAEL,GAAiBD,EAC5D,MACEI,MAAOG,EACPF,YAAaG,EAAkB,OAC/BC,EAAM,MACNC,EAAK,QACLC,EAAO,gBACPC,ICTWC,EAAAA,EAAAA,gBAAe,cAehBC,KAAKC,aDHXC,EAAM,CACVZ,MAAOA,GAASG,EAChBF,YAAaA,GAAeG,EAC5BC,SACAC,MAAO,GAAGC,IAAUD,IACpBO,IAAK,GAAGN,IAAUL,GAAY,KAC9BM,mBAGF,OACEV,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQc,EAAIZ,OAEZF,EAAAA,cAAA,QAAMgB,IAAI,YAAYC,KAAM,GAAGH,EAAIC,SAEnCf,EAAAA,cAAA,QAAMkB,KAAK,SAASC,QAAQ,QAE5BnB,EAAAA,cAAA,QAAMkB,KAAK,cAAcC,QAASL,EAAIX,cACtCH,EAAAA,cAAA,QAAMkB,KAAK,SAASC,QAASL,EAAIP,SAEjCP,EAAAA,cAAA,QAAMoB,SAAS,WAAWD,QAASL,EAAIZ,QACvCF,EAAAA,cAAA,QAAMoB,SAAS,UAAUD,QAAQ,YACjCnB,EAAAA,cAAA,QAAMoB,SAAS,SAASD,QAAS,GAAGL,EAAIC,SACxCf,EAAAA,cAAA,QAAMoB,SAAS,WAAWD,QAASL,EAAIN,QACvCR,EAAAA,cAAA,QAAMoB,SAAS,iBAAiBD,QAASL,EAAIX,cAE7CH,EAAAA,cAAA,QAAMkB,KAAK,eAAeC,QAAQ,wBAClCnB,EAAAA,cAAA,QAAMkB,KAAK,kBAAkBC,QAAQ,eACrCnB,EAAAA,cAAA,QAAMkB,KAAK,eAAeC,QAAQ,eAClCnB,EAAAA,cAAA,QAAMkB,KAAK,gBAAgBC,QAASL,EAAIZ,QACxCF,EAAAA,cAAA,QAAMkB,KAAK,sBAAsBC,QAASL,EAAIX,cAC9CH,EAAAA,cAAA,QAAMkB,KAAK,iBAAiBC,QAAS,GAAGL,EAAIC,SAC5Cf,EAAAA,cAAA,QAAMkB,KAAK,oBAAoBC,QAASL,EAAIN,QAE3CT,EACA,C,6GEjCP,UATqBsB,IACnBrB,EAAAA,cAACsB,EAAAA,EAAM,KACLtB,EAAAA,cAACH,EAAAA,EAAS,KACRG,EAAAA,cAAA,UAAI,aACJA,EAAAA,cAAA,SAAG,6DAOF,MAAMuB,EAAOA,IAAMvB,EAAAA,cAACwB,EAAAA,EAAG,CAACtB,MAAM,MAAME,SAAS,Q","sources":["webpack://parry84-site/./src/components/Container.tsx","webpack://parry84-site/./src/components/Container.module.scss","webpack://parry84-site/./src/components/common/Layout/Layout.tsx","webpack://parry84-site/./src/components/common/Seo.tsx","webpack://parry84-site/./src/hooks/use-seo-metadata.ts","webpack://parry84-site/./src/pages/404.tsx"],"sourcesContent":["import React from 'react';\nimport * as styles from '@components/Container.module.scss';\n\nexport const Container = ({ children }: { children: React.ReactNode }) => (\n  <div className={styles.container}>{children}</div>\n);\n","// extracted by mini-css-extract-plugin\nexport var container = \"Container-module--container--f8c78\";","import React from 'react';\n\nimport '@styles/reset.css';\nimport '@styles/tufte.css';\n\nconst Layout = ({ children }: { children: React.ReactNode }) => <>{children}</>;\n\nexport default Layout;\n","import React from 'react';\nimport { useSiteMetadata } from '@hooks/use-seo-metadata';\n\ntype Props = { title?: string; description?: string; pathname: string; children?: string };\n\nconst Seo = ({ title, description, pathname, children }: Props) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    author,\n    image,\n    siteUrl,\n    twitterUsername,\n  } = useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    author,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ``}`,\n    twitterUsername,\n  };\n\n  return (\n    <>\n      <title>{seo.title}</title>\n\n      <link rel=\"canonical\" href={`${seo.url}/`} />\n\n      <meta name=\"robots\" content=\"all\" />\n\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"author\" content={seo.author} />\n\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={`${seo.url}/`} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:description\" content={seo.description} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content=\"@elparro84\" />\n      <meta name=\"twitter:site\" content=\"@elparro84\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:domain\" content={`${seo.url}/`} />\n      <meta name=\"twitter:image:src\" content={seo.image} />\n\n      {children}\n    </>\n  );\n};\n\nexport default Seo;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n          twitterUsername\n          image\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","'use client';\n\nimport React from 'react';\n\nimport Layout from '@common/Layout';\nimport Seo from '@common/Seo';\nimport { Container } from '@components/Container';\n\nconst NotFoundPage = () => (\n  <Layout>\n    <Container>\n      <h1>NOT FOUND</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Container>\n  </Layout>\n);\n\nexport default NotFoundPage;\n\nexport const Head = () => <Seo title=\"404\" pathname=\"/404\" />;\n"],"names":["Container","_ref","children","React","className","title","description","pathname","defaultTitle","defaultDescription","author","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","rel","href","name","content","property","NotFoundPage","Layout","Head","Seo"],"sourceRoot":""}